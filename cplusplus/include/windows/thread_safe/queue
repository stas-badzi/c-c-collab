#pragma once
#include <queue>
#include <windows.h>
#include <stdio.h>
namespace cpp {
    template<typename T>
    class tsqueue {
    public:
        tsqueue(const tsqueue&) = delete;
        tsqueue& operator= (const tsqueue&) = delete;
        tsqueue() {
            m = CreateMutex(NULL,FALSE,NULL);
            if (!m) {
                printf("CreateMutex error: %lu\n", GetLastError());
                exit(1);
            }
        }
        ~tsqueue() {	
            if (!CloseHandle(m)) {
                printf("CloseHandle error: %lu\n", GetLastError());
                exit(1);
            }
        }
        void push(T val) {
            if (WaitForSingleObject(m,INFINITE) != WAIT_OBJECT_0) { printf("WaitForSingleObject error: %lu\n", GetLastError()); exit(1); }
            q.push(val);
            if (!ReleaseMutex(m)) { printf("ReleaseMutex error: %lu\n", GetLastError()); exit(1); }
        }
        T pop(void) {
            if (WaitForSingleObject(m,INFINITE) != WAIT_OBJECT_0) { printf("WaitForSingleObject error: %lu\n", GetLastError()); exit(1); }
            if (q.empty()) {
                if (!ReleaseMutex(m)) { printf("ReleaseMutex error: %lu\n", GetLastError()); exit(1); }
                throw std::out_of_range("Queue is empty");
            }
            T val = q.front();
            q.pop();
            if (!ReleaseMutex(m)) { printf("ReleaseMutex error: %lu\n", GetLastError()); exit(1); }
            return val;
        }
        bool empty(void) {
            if (WaitForSingleObject(m,INFINITE) != WAIT_OBJECT_0) { printf("WaitForSingleObject error: %lu\n", GetLastError()); exit(1); }
            bool e = q.empty();
            if (!ReleaseMutex(m)) { printf("ReleaseMutex error: %lu\n", GetLastError()); exit(1); }
            return e;
        }
        size_t size(void) {
            if (WaitForSingleObject(m,INFINITE) != WAIT_OBJECT_0) { printf("WaitForSingleObject error: %lu\n", GetLastError()); exit(1); }
            size_t s = q.size();
            if (!ReleaseMutex(m)) { printf("ReleaseMutex error: %lu\n", GetLastError()); exit(1); }
            return s;
        }
    protected:
        std::queue<T> q;
        HANDLE m;
    };
}