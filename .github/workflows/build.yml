name: Build & Upload Binaries

on:
  push:
    branches:
      - '**'

jobs:
  compile-cs-windows:
    name: Compile C# for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile c#
        shell: cmd
        run: |
    

          make cs sudo=0 archchk=0 nodep=1
          make csbin sudo=0 archchk=0 nodep=1
          cd csharp/bin/lib
      - name: Export dynamic library
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinDll
          path: binarysharp/bin/exe/factoryrushsharp.dll
      - name: Export executable
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinExe
          path: binarysharp/bin/exe/cs-factoryrush.exe

  build-msys:
    name: Build program using MSYS2
    needs: compile-cs-windows
    runs-on: windows-latest
    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: make git zip tree mingw-w64-clang-x86_64-toolchain
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinDll
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinExe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: msys2 {0}
        run: |
          touch cs csbin
          cp csharp/bin/lib/factoryrushsharp.dll cplusplus/bin/factoryrushsharp.dll
          cp csharp/bin/lib/factoryrushsharp.dll binaryplus/bin/factoryrushsharp.dll
      - name: Compile code
        shell: msys2 {0}
        env:
          CC: gcc
          CXX: g++
        run: |
          cd /$(echo "${{ github.workspace }}" | sed 's/://g' | sed 's/\\/\//g' )
          tree
          export PATH="/clang64/bin:$PATH"
          make resources cpp cppbin sudo=0 nodep=1 c-compiler=clang cpp-compiler=clang++ archchk=0
          touch cs cpp cppbin csbin
          make archchk=0
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2CsBin
          path: bin/Cs.*.zip

  build-cygwin:
    name: Build program using Cygwin
    needs: compile-cs-windows
    runs-on: windows-latest
    steps:
      - name: Set up Cygwin
        uses: egor-tensin/setup-cygwin@v4
        with:
          packages: gcc-g++ zip grep gawk binutils tree
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinDll
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinExe
          path: binarysharp/bin/exe
      - name: testrea;
        shell: cmd
        run: |
          dir
      - name: Copy C# where it's needed
        shell: C:\tools\cygwin\bin\bash.exe --login -o igncr '{0}'
        run: |
          cd $(cygpath -u "${{ github.workspace }}")
          touch cs
          touch csbin
          pwd
          tree
          cp csharp/bin/lib/factoryrushsharp.dll cplusplus/bin/factoryrushsharp.dll
          cp csharp/bin/lib/factoryrushsharp.dll binaryplus/bin/factoryrushsharp.dll
      - name: Install Programs
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/maweil/MakeForWindows/releases/download/v4.4.1/make-bin-win64.zip" -OutFile "make-bin.zip" -Verbose
          Expand-Archive -Force make-bin.zip .
          del make-bin.zip
          copy make-4.4.1\dist\* .
      - name: Compile code
        shell: C:\tools\cygwin\bin\bash.exe --login -o igncr '{0}'
        env:
          CC: gcc
          CXX: g++
        run: |
          cd $(cygpath -u "${{ github.workspace }}")
          ./make resources cpp cppbin sudo=0 archchk=0 nodep=1
          touch cs cpp cppbin csbin
          ./make archchk=0
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: CygwinCppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: CygwinCsBin
          path: bin/Cs.*.zip
  
  build-windows:
    name: Build program using MSVC
    runs-on: windows-latest
    steps:
      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
      - name: Install Programs
        shell: pwsh
        run: |
          echo $null >> cs
          echo $null >> csbin
          Invoke-WebRequest -Uri "https://github.com/leok7v/gnuwin32.mirror/archive/refs/heads/master.zip" -OutFile "gnuwin32.zip" -Verbose
          Expand-Archive -Force gnuwin32.zip .
          del gnuwin32.zip
          ren gnuwin32.mirror-master gnuwin32
          copy gnuwin32\bin\* .
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Compile code
        shell: cmd
        run:
          utilities\custom\vsdevcmd-x64.bat
          .\make.exe archchk=0 sudo=0 msvc=1 c-compiler=clang-cl cpp-compiler=clang-cl
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: WindowsCppBin
          path: bin/Cpp.*.zip
      - name: Upload C binaries
        uses: actions/upload-artifact@v4
        with:
          name: WindowsCsBin
          path: bin/Cs.*.zip

  build-ubuntu:
    name: Build program using Ubuntu
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64
      - name: Compile code
        shell: bash
        env:
          CC: gcc
          CXX: g++
        run: |
          make sudo=0 archchk=0 c-compiler=clang cpp-compiler=clang++
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: UbuntuCppBin
          path: bin/Cpp.*.tar.gz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: UbuntuCsBin
          path: bin/Cs.*.tar.gz

  build-debian:
    name: Build program using Debian
    runs-on: [self-hosted, debian]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Compile code
        shell: bash
        run: |
          make sudo=0 c-compiler=clang cpp-compiler=clang++
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: DebianCppBin
          path: bin/Cpp.*.tar.gz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: DebianCsBin
          path: bin/Cs.*.tar.gz
  
  build-macos-arm64:
    name: Build program using Arm64 MacOS
    runs-on: macos-15
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile code
        shell: bash
        env:
          CC: gcc
          CXX: g++
        run: |
          export CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH:+${CPLUS_INCLUDE_PATH}:}/Library/Developer/CommandLineTools/SDKs/MacOSX15.sdk/usr/include/c++/v1"
          make sudo=0 cpp-compiler=clang++ c-compiler=clang archchk=0
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSArmCppBin
          path: bin/Cpp.*.tgz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSArmCsBin
          path: bin/Cs.*.tgz
  
  build-macos-amd64:
    name: Build program using x64 MacOS
    runs-on: [self-hosted, macOS, X64]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Compile code
        shell: bash
        run: |
          make release sudo=0 cpp-compiler=clang++ c-compiler=clang
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSAmdCppBin
          path: bin/Cpp.*.tgz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSAmdCsBin
          path: bin/Cs.*.tgz
