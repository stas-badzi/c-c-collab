name: Build & Upload Binaries

on:
  push:
    branches:
      - '**'

jobs:
  compile-cs-windows-x64:
    permissions:
      contents: read
    name: Compile C# for Windows (x64)
    runs-on: windows-2022
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile c#
        shell: cmd
        run: |
    

          make cs sudo=0 archchk=0 nodep=1 msvc=1
          make csbin sudo=0 archchk=0 nodep=1
          cd csharp/bin/lib
      - name: Export dynamic library
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinx64Dll
          path: csharp/bin/lib/factoryrushsharp.dll
      - name: Export dynamic library linkage 
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinx64DllLib
          path: csharp/bin/lib/factoryrushsharp.lib
      - name: Export executable
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinx64Exe
          path: binarysharp/bin/exe/cs-factoryrush.exe

  build-msys-x64:
    permissions:
      contents: read
    name: Build program using MSYS2 (x64)
    needs: compile-cs-windows-x64
    runs-on: windows-2022
    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: make git zip mingw-w64-x86_64-binutils mingw-w64-x86_64-clang
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx64Dll
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx64Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: msys2 {0}
        run: |
          touch cs csbin
          cp csharp/bin/lib/factoryrushsharp.dll cplusplus/bin/factoryrushsharp.dll
          cp csharp/bin/lib/factoryrushsharp.dll binaryplus/bin/factoryrushsharp.dll
      - name: Compile code
        shell: msys2 {0}
        run: |
          cd /$(echo "${{ github.workspace }}" | sed 's/://g' | sed 's/\\/\//g' )
          export PATH=/mingw64/bin:$PATH
          make sudo=0 nodep=1 c-compiler=clang cpp-compiler=clang++ archchk=0
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2x64CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2x64CsBin
          path: bin/Cs.*.zip
  
  build-cygwin-x64:
    permissions:
      contents: read
    name: Build program using Cygwin (x64)
    needs: compile-cs-windows-x64
    runs-on: windows-2022
    steps:
      - name: Install Cygwin
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://www.cygwin.com/setup-x86_64.exe" -OutFile "setup-x86_64.exe" -Verbose
          .\setup-x86_64.exe -s https://mirrors.kernel.org/sourceware/cygwin --no-admin -q -P binutils,gcc-g++,zip,gawk,grep
          # wait for cygwin to install the last man page of the last package (openssl) 
          Do {Start-Sleep -Milliseconds 100} Until (Test-Path "C:\cygwin64\usr\share\man\man7\openssl_user_macros.7ossl.gz")
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx64Dll
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx64Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: pwsh
        run: |
          echo $null >> cs
          echo $null >> csbin
          cp csharp/bin/lib/factoryrushsharp.dll cplusplus/bin/factoryrushsharp.dll
          cp csharp/bin/lib/factoryrushsharp.dll binaryplus/bin/factoryrushsharp.dll
      - name: Install Programs
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/maweil/MakeForWindows/releases/download/v4.4.1/make-bin-win64.zip" -OutFile "make-bin.zip" -Verbose
          Expand-Archive -Force make-bin.zip .
          del make-bin.zip
          copy make-4.4.1\dist\* .
      - name: Compile code
        shell: C:\cygwin64\bin\bash.exe --login -o igncr '{0}'
        run: |
          cd "$(cygpath -u '${{ github.workspace }}')"
          ./make.exe sudo=0 archchk=0 nodep=1 c-compiler=/bin/gcc cpp-compiler=/bin/g++
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Cygwinx64CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Cygwinx64CsBin
          path: bin/Cs.*.zip
  
  build-windows-x64:
    permissions:
      contents: read
    name: Build program using MSVC (x64)
    runs-on: windows-2022
    needs: compile-cs-windows-x64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx64Dll
          path: csharp/bin/lib
      - name: Import C# compiled dynamic linkage
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx64DllLib
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx64Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: cmd
        run: |
          echo $null >> cs
          echo $null >> csbin
          copy csharp\bin\lib\factoryrushsharp.dll cplusplus\bin\factoryrushsharp.dll
          copy csharp\bin\lib\factoryrushsharp.dll binaryplus\bin\factoryrushsharp.dll
          del "C:\Program Files\LLVM\bin\clang-cl.exe"
      - name: Install Programs
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/leok7v/gnuwin32.mirror/archive/refs/heads/master.zip" -OutFile "gnuwin32.zip" -Verbose
          Expand-Archive -Force gnuwin32.zip .
          del gnuwin32.zip
          ren gnuwin32.mirror-master gnuwin32
          copy gnuwin32\bin\* .
          del link.exe
      - name: Compile code
        shell: cmd /c {0}
        run: utilities\custom\vsdevcmd-x64.bat .\make.exe resources cpp cppbin release package archchk=0 sudo=0 msvc=1 nodep=1 c-compiler=clang-cl cpp-compiler=clang-cl
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Windowsx64CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Windowsx64CsBin
          path: bin/Cs.*.zip

  compile-cs-windows-x86:
    permissions:
      contents: read
    name: Compile C# for Windows (x86)
    runs-on: windows-2022
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile c#
        shell: cmd
        run: |
          make cs tgarch=x86 sudo=0 archchk=0 nodep=1 msvc=1
          make csbin tgarch=x86 sudo=0 archchk=0 nodep=1
          cd csharp/bin/lib
      - name: Export dynamic library
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinx86Dll
          path: csharp/bin/lib/factoryrushsharp.dll
      - name: Export dynamic library linkage
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinx86DllLib
          path: csharp/bin/lib/factoryrushsharp.lib
      - name: Export executable
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinx86Exe
          path: binarysharp/bin/exe/cs-factoryrush.exe

  build-msys-x86:
    permissions:
      contents: read
    name: Build program using MSYS2 (i686)
    needs: compile-cs-windows-x86
    runs-on: windows-2022
    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-i686-make git zip mingw-w64-i686-binutils mingw-w64-i686-clang
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx86Dll
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx86Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: msys2 {0}
        run: |
          touch cs csbin
          cp csharp/bin/lib/factoryrushsharp.dll cplusplus/bin/factoryrushsharp.dll
          cp csharp/bin/lib/factoryrushsharp.dll binaryplus/bin/factoryrushsharp.dll
      - name: Compile code
        shell: msys2 -mingw32 {0}
        run: make sudo=0 nodep=1 c-compiler=clang cpp-compiler=clang++ archchk=0 tgarch=i686
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2i686CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2i686CsBin
          path: bin/Cs.*.zip
  
  build-cygwin-x86:
    permissions:
      contents: read
    name: Build program using Cygwin x86
    needs: compile-cs-windows-x86
    runs-on: windows-2022
    steps:
      - name: Install Cygwin
        shell: powershell
        run: |
          Invoke-WebRequest -Uri http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/setup/snapshots/setup-x86-2.923.exe -OutFile setup-x86.exe -Verbose
          .\setup-x86.exe -W -q -P gcc-g++,zip,grep,gawk,binutils,tar
          # wait for cygwin to install the last man page of the last package (openssl) 
          Do {Start-Sleep -Milliseconds 100} Until (Test-Path "C:\cygwin\usr\share\man\man1\zipsplit.1.gz")
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx86Dll
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx86Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: pwsh
        run: |
          echo $null >> cs
          echo $null >> csbin
          cp csharp/bin/lib/factoryrushsharp.dll cplusplus/bin/factoryrushsharp.dll
          cp csharp/bin/lib/factoryrushsharp.dll binaryplus/bin/factoryrushsharp.dll
      - name: Install Programs
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://mirror.msys2.org/mingw/mingw32/mingw-w64-i686-make-4.4.1-3-any.pkg.tar.zst" -OutFile "make-bin.tar.zst" -Verbose
          C:\cygwin\bin\tar.exe -xf make-bin.tar.zst
          del make-bin.tar.zst
          copy make-bin\mingw32\bin\make.exe .
      - name: Compile code
        shell: C:\cygwin\bin\bash.exe --login -o igncr '{0}'
        run: |
          cd /cygdrive/$(echo '${{ github.workspace }}' | sed 's/\\\\/\\//g' | sed 's/://g' | sed 's/\(.*\)/\L\1/')
          ./make resources cpp cppbin sudo=0 archchk=0 nodep=1 c-compiler=/bin/gcc cpp-compiler=/bin/g++
          touch cs cpp cppbin csbin
          ./make archchk=0
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Cygwinx86CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Cygwinx86CsBin
          path: bin/Cs.*.zip
  
  build-windows-x86:
    permissions:
      contents: read
    name: Build program using MSVC (x86)
    runs-on: windows-2022
    needs: compile-cs-windows-x86
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx86Dll
          path: csharp/bin/lib
      - name: Import C# compiled dynamic linkage
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx86DllLib
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinx86Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: cmd
        run: |
          echo $null >> cs
          echo $null >> csbin
          copy csharp\bin\lib\factoryrushsharp.dll cplusplus\bin\factoryrushsharp.dll
          copy csharp\bin\lib\factoryrushsharp.dll binaryplus\bin\factoryrushsharp.dll
          del "C:\Program Files\LLVM\bin\clang-cl.exe"
      - name: Install Programs
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/leok7v/gnuwin32.mirror/archive/refs/heads/master.zip" -OutFile "gnuwin32.zip" -Verbose
          Expand-Archive -Force gnuwin32.zip .
          del gnuwin32.zip
          ren gnuwin32.mirror-master gnuwin32
          copy gnuwin32\bin\* .
          del link.exe
      - name: Compile code
        shell: cmd /c {0}
        run: |
          utilities\custom\vsdevcmd-x86.bat .\make.exe resources cpp cppbin release package archchk=0 sudo=0 msvc=1 tgarch=x86 nodep=1 c-compiler=clang-cl cpp-compiler=clang-cl
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Windowsx86CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Windowsx86CsBin
          path: bin/Cs.*.zip
  
  compile-cs-windows-arm64:
    permissions:
      contents: read
    name: Compile C# for Windows (arm64)
    runs-on: windows-11-arm
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile c#
        shell: cmd
        run: |
          make cs tgarch=arm64 sudo=0 archchk=0 nodep=1 msvc=1
          make csbin tgarch=arm64 sudo=0 archchk=0 nodep=1 
          cd csharp/bin/lib
      - name: Export dynamic library
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinArm64Dll
          path: csharp/bin/lib/factoryrushsharp.dll
      - name: Export dynamic library linkage
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinArm64DllLib
          path: csharp/bin/lib/factoryrushsharp.lib
      - name: Export executable
        uses: actions/upload-artifact@v4
        with:
          name: CSharpWinArm64Exe
          path: binarysharp/bin/exe/cs-factoryrush.exe

  build-msys-arm64:
    permissions:
      contents: read
    name: Build program using MSYS2 (aarch64)
    needs: compile-cs-windows-arm64
    runs-on: windows-11-arm
    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: make git zip mingw-w64-clang-aarch64-binutils mingw-w64-clang-aarch64-clang
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinArm64Dll
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinArm64Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: msys2 {0}
        run: |
          touch cs csbin
          cp csharp/bin/lib/factoryrushsharp.dll cplusplus/bin/factoryrushsharp.dll
          cp csharp/bin/lib/factoryrushsharp.dll binaryplus/bin/factoryrushsharp.dll
      - name: Compile code
        shell: msys2 {0}
        env:
          CC: gcc
          CXX: g++
        run: |
          cd /$(echo "${{ github.workspace }}" | sed 's/://g' | sed 's/\\/\//g' )
          export PATH=/clangarm64/bin:$PATH
          make resources cpp cppbin sudo=0 nodep=1 c-compiler=clang cpp-compiler=clang++ archchk=0
          touch cs cpp cppbin csbin
          make tgarch=aarch64 archchk=0
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2aarch64CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Msys2aarch64CsBin
          path: bin/Cs.*.zip

  build-windows-arm64:
    permissions:
      contents: read
    name: Build program using MSVC (arm64)
    runs-on: windows-11-arm
    needs: compile-cs-windows-arm64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Import C# compiled dynamic library
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinArm64Dll
          path: csharp/bin/lib
      - name: Import C# compiled dynamic linkage
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinArm64DllLib
          path: csharp/bin/lib
      - name: Import C# compiled executable
        uses: actions/download-artifact@v4
        with:
          name: CSharpWinArm64Exe
          path: binarysharp/bin/exe
      - name: Copy C# where it's needed
        shell: cmd
        run: |
          echo $null >> cs
          echo $null >> csbin
          copy csharp\bin\lib\factoryrushsharp.dll cplusplus\bin\factoryrushsharp.dll
          copy csharp\bin\lib\factoryrushsharp.dll binaryplus\bin\factoryrushsharp.dll
      - name: Install Programs
        shell: pwsh
        run: |
          choco install make
          choco install zip
          del "C:\Program Files\LLVM\bin\clang-cl.exe"
      - name: Compile code
        shell: cmd /c {0}
        run: utilities\custom\vsdevcmd-arm64.bat make resources cpp cppbin release package archchk=0 sudo=0 msvc=1 nodep=1 tgarch=arm64 c-compiler=clang-cl cpp-compiler=clang-cl
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: Windowsarm64CppBin
          path: bin/Cpp.*.zip
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: Windowsarm64CsBin
          path: bin/Cs.*.zip

  build-ubuntu-x64:
    permissions:
      contents: read
    name: Build program using Ubuntu
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64
      - name: Compile code
        shell: bash
        env:
          CC: gcc
          CXX: g++
        run: |
          make sudo=0 archchk=0 c-compiler=clang cpp-compiler=clang++
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: UbuntuCppBin
          path: bin/Cpp.*.tar.gz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: UbuntuCsBin
          path: bin/Cs.*.tar.gz

  

  build-ubuntu-arm64:
    name: Build program using Ubuntu (aarch64)
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Set up Clang
        shell: sh
        run: sudo apt install clang
      - name: Compile code
        shell: bash
        run: |
          make sudo=0 archchk=0 c-compiler=clang cpp-compiler=clang++ tgarch=arm64
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: UbuntuArm64CppBin
          path: bin/Cpp.*.tar.gz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: UbuntuArm64CsBin
          path: bin/Cs.*.tar.gz

  build-debian-x64:
    permissions:
      contents: none
    name: Build program using Debian
    runs-on: [self-hosted, debian]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Compile code
        shell: bash
        run: |
          make sudo=0 c-compiler=clang cpp-compiler=clang++
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: DebianCppBin
          path: bin/Cpp.*.tar.gz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: DebianCsBin
          path: bin/Cs.*.tar.gz
  
  build-macos-arm64:
    permissions:
      contents: read
    name: Build program using Arm64 MacOS
    runs-on: macos-15
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile code
        shell: bash
        run: |
          sudo xcode-select -s /Library/Developer/CommandLineTools
          make sudo=0 cpp-compiler=clang++ c-compiler=clang archchk=0
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSArmCppBin
          path: bin/Cpp.*.tgz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSArmCsBin
          path: bin/Cs.*.tgz
  
  build-macos-x64:
    permissions:
      contents: read
    name: Build program using x64 MacOS 13
    runs-on: macos-13
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile code
        shell: bash
        run: |
          sudo xcode-select -s /Library/Developer/CommandLineTools
          make release sudo=0 cpp-compiler=clang++ c-compiler=clang
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSAmdCppBin
          path: bin/Cpp.*.tgz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSAmdCsBin
          path: bin/Cs.*.tgz
  
  build-macos-universal2:
    permissions:
      contents: read
    name: Build program Universal2 MacOS
    runs-on: macos-15
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Compile code
        shell: bash
        run: |
          sudo xcode-select -s /Library/Developer/CommandLineTools
          make sudo=0 cpp-compiler=clang++ c-compiler=clang archchk=0 universal2=1
      - name: Upload C++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSUniversal2CppBin
          path: bin/Cpp.*.tgz
      - name: Upload C# binaries
        uses: actions/upload-artifact@v4
        with:
          name: MacOSUniversal2CsBin
          path: bin/Cs.*.tgz
  
#  build-macos-docker-x64:
#    permissions:
#      contents: read
#    name: Build program using x64 MacOS 15 (Docker)
#    runs-on: ubuntu-latest
#    container:
#      image: dockurr/macos
#      env:
#        VERSION: "15"
#    steps:
#      - name: Checkout source code
#        uses: actions/checkout@v4
#      - name: Setup .NET
#        uses: actions/setup-dotnet@v4
#        with:
#          dotnet-version: '9.0.x'
#      - name: Compile code
#        shell: bash
#        run: |
#          xcode-select -s /Library/Developer/CommandLineTools
#          make release sudo=0 cpp-compiler=clang++ c-compiler=clang
#      - name: Upload C++ binaries
#        uses: actions/upload-artifact@v4
#        with:
#          name: MacOSAmdCppBin
#          path: bin/Cpp.*.tgz
#      - name: Upload C# binaries
#        uses: actions/upload-artifact@v4
#        with:
#          name: MacOSAmdCsBin
#          path: bin/Cs.*.tgz
